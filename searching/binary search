//Binary search is used in a sorted array
//Time complexity O(log n)

#include<bits\stdc++.h>
using namespace std;

class Array{
    public:
    int *arr;          //pointer to dynamic array
    int size;          //total capacity of array
    int length;        //total element present in the array
    //constructor
    Array(int inputarr[],int n,int s){                                    
        size = s;
        length = n;
        arr = inputarr;             //just pointing no copy 
    }
    //for printing the elements of array
    void display(){                          
        for(int i=0;i<length;i++){                               //-o(n)
            cout << arr[i] <<"  ";
        }
        cout<<endl;
    }
    //using for loop
    // int binarysearch(int key,int n){  
    //     int low = 0,high = n;
    //     while(low<high){
    //         for(int i=low;i<high;i++){
    //             int mid = (low+high)/2;
    //             if(key == arr[mid]) return mid;
    //             else if (key<arr[mid]) high = mid-1;
    //             else if(key>arr[mid]) low = mid+1;
    //         }
    //     }
    //     return -1;
    // }
    //using recursion (optimized approach)
    int binarysearch(int low,int high,int key){
        if (low<high){
            int mid = (low+high)/2;
            if(key == arr[mid]) return mid;
            else if(key<arr[mid]){
                return binarysearch(low,mid-1,key);
            }
            else if(key>arr[mid]){
                return binarysearch(mid+1,high,key);
            }
        }
        return -1;
    }
};
//main function
int main(){
    int myarray[] = {1,3,4,56,77,87};                                        //-o(1)
    int n = sizeof(myarray)/sizeof(myarray[0]);
    int key;
    Array a(myarray,n,10);                                               //-o(3)

    cout<< "original array"<<endl;
    a.display();                                                         //-o(n)
    cout<< "enter element to search"<<endl;
    cin >> key ;
    //cout <<"element fount at " << a.binarysearch(key,n)<<endl;
    cout <<"element fount at " << a.binarysearch(0,n,key)<<endl; 
    return 0;
}
