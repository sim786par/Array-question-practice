//Jump search 
//sorted array . 1.array is divided into blocks of jump size 
//2.Jump ahead block by block until the element is greater than or equal to the key.
//3.Perform a linear search inside that block.
//4.If not found â†’ return -1.
//Time complexity O(sqrt(n))

#include<bits\stdc++.h>
using namespace std;

class Array{
    public:
    int *arr;          //pointer to dynamic array
    int size;          //total capacity of array
    int length;        //total element present in the array
    //constructor
    Array(int inputarr[],int n,int s){                                    
        size = s;
        length = n;
        arr = inputarr;             //just pointing no copy 
    }
    //for printing the elements of array
    void display(){                          
        for(int i=0;i<length;i++){                               //-o(n)
            cout << arr[i] <<"  ";
        }
        cout<<endl;
    }
    int jumpsearch(int key){
        int jump = sqrt(length);
        cout << "jump size : "<<jump <<endl;
        int prev = 0;
        while(arr[min(jump,length)-1] < key){
            prev = jump;
            jump +=sqrt(length);
            if(prev >= length) return -1;
        }
        //Linear search 
        for(int i=prev;i<min(jump,length);i++){
            if(arr[i] == key) return i;
        }
        
        return -1;
    }
   
};
//main function
int main(){
    int myarray[] = {1,3,4,12,22,34,43,56,77,87,90};                                        //-o(1)
    int n = sizeof(myarray)/sizeof(myarray[0]);
    int key;
    Array a(myarray,n,10);                                               //-o(3)

    cout<< "original array"<<endl;
    a.display();                                                         //-o(n)
    cout<< "enter element to search"<<endl;
    cin >> key ;
    
   
    cout <<"element fount at " << a.jumpsearch(key)<<endl; 
    
    return 0;
}
