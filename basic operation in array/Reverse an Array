#include<bits\stdc++.h>
using namespace std;
class Reverse{
    public:
    int i,j;
    //using a temp array and two pointers T(n) = O(n)
    void Reversearray(int arr[],int n){
        int *temp = new int[n];
        for(i=n-1,j=0;i>=0;i--,j++){
            temp[j] = arr[i];
        }
        for(i=0;i<n;i++){
            arr[i] = temp[i];
        }
        delete[] temp;

    }

    //using while loop and one pointer T(n) = O(n/2) = O(n) most optimized because of space complexity
    // void Reversearray(int arr[],int n){
    //     i=0;
    //     while (i<(n+1)/2){
    //         int temp = arr[i];
    //         arr[i] = arr[n-1-i];
    //         arr[n-1-i] = temp;
    //         i++;
    //     }
    //}
    
    //using recursion and two pointers T(n) = O(n/2) = O(n)
    // void recursivereverse(int arr[],int start,int end){
    //     if(start>=end) return ;
    //     int temp= arr[start];
    //     arr[start]=arr[end];
    //     arr[end]=temp;
    //     recursivereverse(arr,start+1,end-1);
    // }
    void display(int arr[],int n){
        for(i=0;i<n;i++){
            cout<< arr[i]<<"  ";
        }
        cout<<endl;
    }
};
int main(){
    int array[] = {1,3,4,6,7,8,0,9};
    int n =sizeof(array)/ sizeof(array[0]);
    Reverse rev;
    cout<< "Original Array:\n";
    rev.display(array,n);
    rev.Reversearray(array,n);
    //rev.recursivereverse(array,0,n-1);
    cout << "Reversed Array:\n" ;
    rev.display(array,n);

    return 0;
}
