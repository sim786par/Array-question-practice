#include<bits\stdc++.h>
using namespace std;

class Array{
    public:
    int *arr;          //pointer to dynamic array
    int size;          //total capacity of array
    int length;        //total element present in the array
    //constructor
    Array(int inputarr[],int n,int s){                                    //-o(3)
        size = s;
        length = n;
        arr = inputarr;             //just pointing no copy 
    }
    //for printing the elements of array
    void display(){                          
        for(int i=0;i<length;i++){                               //-o(n)
            cout << arr[i] <<"  ";
        }
        cout<<endl;
    }
    int deletelement(int pos){
        
        int x = arr[pos];
        if(pos>=0 && pos<length){
            
            for(int i=pos;i<length-1;i++){                              //-o(n)
                arr[i] = arr[i+1];
            }
            length--;
            return x;
        }
        return -1;
    }   
};
//main function
int main(){
    int myarray[] = {1,3,4,56,77};                                        //-o(1)
    int n = sizeof(myarray)/sizeof(myarray[0]);
    Array a(myarray,n,10);                                               //-o(3)
    cout<< "array before deletion"<<endl;
    a.display();                                                         //-o(n)
    cout<< "element deleted from array is: "<<a.deletelement(3)<<endl;    //o(n)
    cout<< "element deleted from array is: "<<a.deletelement(0)<<endl;     //-o(n)
    cout<< "element deleted from array is: "<<a.deletelement(3)<<endl;     //-o(n)
    a.display();
    return 0;
}
//this is the best approach because an array is passed inside the class and a pointer is pointing to the elements.
//no extra memory is allocated in the class for the array
//total time complexity of the code is o(n)
